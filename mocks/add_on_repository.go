// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// AddOnRepository is an autogenerated mock type for the AddOnRepository type
type AddOnRepository struct {
	mock.Mock
}

// GetAddOnById provides a mock function with given fields: addOnId
func (_m *AddOnRepository) GetAddOnById(addOnId int) (*entity.AddOn, error) {
	ret := _m.Called(addOnId)

	var r0 *entity.AddOn
	if rf, ok := ret.Get(0).(func(int) *entity.AddOn); ok {
		r0 = rf(addOnId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(addOnId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddOnByMultipleId provides a mock function with given fields: addOnsId
func (_m *AddOnRepository) GetAddOnByMultipleId(addOnsId []int) ([]entity.AddOn, error) {
	ret := _m.Called(addOnsId)

	var r0 []entity.AddOn
	if rf, ok := ret.Get(0).(func([]int) []entity.AddOn); ok {
		r0 = rf(addOnsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(addOnsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddOn provides a mock function with given fields:
func (_m *AddOnRepository) GetAllAddOn() ([]entity.AddOn, error) {
	ret := _m.Called()

	var r0 []entity.AddOn
	if rf, ok := ret.Get(0).(func() []entity.AddOn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.AddOn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddOnRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddOnRepository creates a new instance of AddOnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddOnRepository(t mockConstructorTestingTNewAddOnRepository) *AddOnRepository {
	mock := &AddOnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
