// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// PromoUserRepository is an autogenerated mock type for the PromoUserRepository type
type PromoUserRepository struct {
	mock.Mock
}

// CreatePromoUser provides a mock function with given fields: promo
func (_m *PromoUserRepository) CreatePromoUser(promo entity.PromoUser) (*entity.PromoUser, error) {
	ret := _m.Called(promo)

	var r0 *entity.PromoUser
	if rf, ok := ret.Get(0).(func(entity.PromoUser) *entity.PromoUser); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PromoUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.PromoUser) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromoUserByUserId provides a mock function with given fields: userId
func (_m *PromoUserRepository) GetAllPromoUserByUserId(userId int) ([]entity.PromoUser, error) {
	ret := _m.Called(userId)

	var r0 []entity.PromoUser
	if rf, ok := ret.Get(0).(func(int) []entity.PromoUser); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PromoUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoUserById provides a mock function with given fields: promoUserId
func (_m *PromoUserRepository) GetPromoUserById(promoUserId int) (*entity.PromoUser, error) {
	ret := _m.Called(promoUserId)

	var r0 *entity.PromoUser
	if rf, ok := ret.Get(0).(func(int) *entity.PromoUser); ok {
		r0 = rf(promoUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PromoUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(promoUserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromoUser provides a mock function with given fields: promo
func (_m *PromoUserRepository) UpdatePromoUser(promo entity.PromoUser) (*entity.PromoUser, error) {
	ret := _m.Called(promo)

	var r0 *entity.PromoUser
	if rf, ok := ret.Get(0).(func(entity.PromoUser) *entity.PromoUser); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PromoUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.PromoUser) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromoUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoUserRepository creates a new instance of PromoUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoUserRepository(t mockConstructorTestingTNewPromoUserRepository) *PromoUserRepository {
	mock := &PromoUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
