// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// AddressUsecase is an autogenerated mock type for the AddressUsecase type
type AddressUsecase struct {
	mock.Mock
}

// CreateAddress provides a mock function with given fields: request
func (_m *AddressUsecase) CreateAddress(request dto.AddressCreateRequest) (*dto.AddressResponse, error) {
	ret := _m.Called(request)

	var r0 *dto.AddressResponse
	if rf, ok := ret.Get(0).(func(dto.AddressCreateRequest) *dto.AddressResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.AddressCreateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressByUserId provides a mock function with given fields: userId
func (_m *AddressUsecase) GetAddressByUserId(userId int) ([]dto.AddressResponse, error) {
	ret := _m.Called(userId)

	var r0 []dto.AddressResponse
	if rf, ok := ret.Get(0).(func(int) []dto.AddressResponse); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddress provides a mock function with given fields:
func (_m *AddressUsecase) GetAllAddress() ([]dto.AddressResponse, error) {
	ret := _m.Called()

	var r0 []dto.AddressResponse
	if rf, ok := ret.Get(0).(func() []dto.AddressResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressUsecase creates a new instance of AddressUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressUsecase(t mockConstructorTestingTNewAddressUsecase) *AddressUsecase {
	mock := &AddressUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
