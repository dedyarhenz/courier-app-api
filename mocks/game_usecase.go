// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// GameUsecase is an autogenerated mock type for the GameUsecase type
type GameUsecase struct {
	mock.Mock
}

// Play provides a mock function with given fields: request
func (_m *GameUsecase) Play(request dto.GamePlayRequest) (*dto.GameResponse, error) {
	ret := _m.Called(request)

	var r0 *dto.GameResponse
	if rf, ok := ret.Get(0).(func(dto.GamePlayRequest) *dto.GameResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.GamePlayRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameUsecase creates a new instance of GameUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameUsecase(t mockConstructorTestingTNewGameUsecase) *GameUsecase {
	mock := &GameUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
