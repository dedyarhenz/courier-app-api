// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// SizeRepository is an autogenerated mock type for the SizeRepository type
type SizeRepository struct {
	mock.Mock
}

// GetAllSize provides a mock function with given fields:
func (_m *SizeRepository) GetAllSize() ([]entity.Size, error) {
	ret := _m.Called()

	var r0 []entity.Size
	if rf, ok := ret.Get(0).(func() []entity.Size); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Size)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSizeById provides a mock function with given fields: sizeId
func (_m *SizeRepository) GetSizeById(sizeId int) (*entity.Size, error) {
	ret := _m.Called(sizeId)

	var r0 *entity.Size
	if rf, ok := ret.Get(0).(func(int) *entity.Size); ok {
		r0 = rf(sizeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Size)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(sizeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSizeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSizeRepository creates a new instance of SizeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSizeRepository(t mockConstructorTestingTNewSizeRepository) *SizeRepository {
	mock := &SizeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
