// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// PromoRepository is an autogenerated mock type for the PromoRepository type
type PromoRepository struct {
	mock.Mock
}

// CountPromo provides a mock function with given fields: search
func (_m *PromoRepository) CountPromo(search string) int64 {
	ret := _m.Called(search)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CreatePromo provides a mock function with given fields: promo
func (_m *PromoRepository) CreatePromo(promo entity.Promo) (*entity.Promo, error) {
	ret := _m.Called(promo)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(entity.Promo) *entity.Promo); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Promo) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromo provides a mock function with given fields: offset, limit, search, orderAndSort
func (_m *PromoRepository) GetAllPromo(offset int, limit int, search string, orderAndSort string) ([]entity.Promo, error) {
	ret := _m.Called(offset, limit, search, orderAndSort)

	var r0 []entity.Promo
	if rf, ok := ret.Get(0).(func(int, int, string, string) []entity.Promo); ok {
		r0 = rf(offset, limit, search, orderAndSort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(offset, limit, search, orderAndSort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromoGame provides a mock function with given fields:
func (_m *PromoRepository) GetAllPromoGame() ([]entity.Promo, error) {
	ret := _m.Called()

	var r0 []entity.Promo
	if rf, ok := ret.Get(0).(func() []entity.Promo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoById provides a mock function with given fields: promoId
func (_m *PromoRepository) GetPromoById(promoId int) (*entity.Promo, error) {
	ret := _m.Called(promoId)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(int) *entity.Promo); ok {
		r0 = rf(promoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(promoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromo provides a mock function with given fields: promo
func (_m *PromoRepository) UpdatePromo(promo entity.Promo) (*entity.Promo, error) {
	ret := _m.Called(promo)

	var r0 *entity.Promo
	if rf, ok := ret.Get(0).(func(entity.Promo) *entity.Promo); ok {
		r0 = rf(promo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Promo) error); ok {
		r1 = rf(promo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoRepository creates a new instance of PromoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoRepository(t mockConstructorTestingTNewPromoRepository) *PromoRepository {
	mock := &PromoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
