// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "final-project-backend/dto"

	mock "github.com/stretchr/testify/mock"
)

// PromoUsecase is an autogenerated mock type for the PromoUsecase type
type PromoUsecase struct {
	mock.Mock
}

// CreatePromo provides a mock function with given fields: request
func (_m *PromoUsecase) CreatePromo(request dto.PromoCreateRequest) (*dto.PromoResponse, error) {
	ret := _m.Called(request)

	var r0 *dto.PromoResponse
	if rf, ok := ret.Get(0).(func(dto.PromoCreateRequest) *dto.PromoResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PromoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.PromoCreateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPromo provides a mock function with given fields: page, limit, search, order, sort
func (_m *PromoUsecase) GetAllPromo(page int, limit int, search string, order string, sort string) (dto.PromoPaginateResponse, error) {
	ret := _m.Called(page, limit, search, order, sort)

	var r0 dto.PromoPaginateResponse
	if rf, ok := ret.Get(0).(func(int, int, string, string, string) dto.PromoPaginateResponse); ok {
		r0 = rf(page, limit, search, order, sort)
	} else {
		r0 = ret.Get(0).(dto.PromoPaginateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string, string) error); ok {
		r1 = rf(page, limit, search, order, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoById provides a mock function with given fields: promoId
func (_m *PromoUsecase) GetPromoById(promoId int) (*dto.PromoResponse, error) {
	ret := _m.Called(promoId)

	var r0 *dto.PromoResponse
	if rf, ok := ret.Get(0).(func(int) *dto.PromoResponse); ok {
		r0 = rf(promoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PromoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(promoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePromo provides a mock function with given fields: request
func (_m *PromoUsecase) UpdatePromo(request dto.PromoUpdateRequest) (*dto.PromoResponse, error) {
	ret := _m.Called(request)

	var r0 *dto.PromoResponse
	if rf, ok := ret.Get(0).(func(dto.PromoUpdateRequest) *dto.PromoResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PromoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.PromoUpdateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPromoUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPromoUsecase creates a new instance of PromoUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPromoUsecase(t mockConstructorTestingTNewPromoUsecase) *PromoUsecase {
	mock := &PromoUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
