// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "final-project-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// AddressRepository is an autogenerated mock type for the AddressRepository type
type AddressRepository struct {
	mock.Mock
}

// CountAddress provides a mock function with given fields: search
func (_m *AddressRepository) CountAddress(search string) int64 {
	ret := _m.Called(search)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CountAddressByUserId provides a mock function with given fields: userId, search
func (_m *AddressRepository) CountAddressByUserId(userId int, search string) int64 {
	ret := _m.Called(userId, search)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int, string) int64); ok {
		r0 = rf(userId, search)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CreateAddress provides a mock function with given fields: address
func (_m *AddressRepository) CreateAddress(address entity.Address) (*entity.Address, error) {
	ret := _m.Called(address)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(entity.Address) *entity.Address); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddressByUserId provides a mock function with given fields: userId, addressId
func (_m *AddressRepository) DeleteAddressByUserId(userId int, addressId int) error {
	ret := _m.Called(userId, addressId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, addressId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAddressByUserId provides a mock function with given fields: userId, addressId
func (_m *AddressRepository) GetAddressByUserId(userId int, addressId int) (*entity.Address, error) {
	ret := _m.Called(userId, addressId)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(int, int) *entity.Address); ok {
		r0 = rf(userId, addressId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userId, addressId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddress provides a mock function with given fields: offset, limit, search, orderAndSort
func (_m *AddressRepository) GetAllAddress(offset int, limit int, search string, orderAndSort string) ([]entity.Address, error) {
	ret := _m.Called(offset, limit, search, orderAndSort)

	var r0 []entity.Address
	if rf, ok := ret.Get(0).(func(int, int, string, string) []entity.Address); ok {
		r0 = rf(offset, limit, search, orderAndSort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, string, string) error); ok {
		r1 = rf(offset, limit, search, orderAndSort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAddressByUserId provides a mock function with given fields: userId, offset, limit, search, orderAndSort
func (_m *AddressRepository) GetAllAddressByUserId(userId int, offset int, limit int, search string, orderAndSort string) ([]entity.Address, error) {
	ret := _m.Called(userId, offset, limit, search, orderAndSort)

	var r0 []entity.Address
	if rf, ok := ret.Get(0).(func(int, int, int, string, string) []entity.Address); ok {
		r0 = rf(userId, offset, limit, search, orderAndSort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, string, string) error); ok {
		r1 = rf(userId, offset, limit, search, orderAndSort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddressByUserId provides a mock function with given fields: address
func (_m *AddressRepository) UpdateAddressByUserId(address entity.Address) (*entity.Address, error) {
	ret := _m.Called(address)

	var r0 *entity.Address
	if rf, ok := ret.Get(0).(func(entity.Address) *entity.Address); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressRepository creates a new instance of AddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressRepository(t mockConstructorTestingTNewAddressRepository) *AddressRepository {
	mock := &AddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
